// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___HONEYBADGER_HXX
#define CXX___HONEYBADGER_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace honeybadger
{
  namespace message
  {
    class useridType;
    class hostidType;
    class passwordType;
    class fileidType;
    class filepathType;
    class emailType;
    class filecontentType;
    class actionType;
    class filelengthType;
    class registerRequestMessageType;
    class registerResponseMessageType;
    class loginRequestMessageType;
    class loginResponseMessageType;
    class newfileRequestMessageType;
    class newfileResponseMessageType;
    class filepatchRequestMessageType;
    class filepatchResponseMessageType;
    class filecontentRequestMessageType;
    class filecontentResponseMessageType;
    class HBMessages;
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace honeybadger
{
  namespace message
  {
    class useridType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      useridType ();

      useridType (const char*);

      useridType (const ::std::string&);

      useridType (const ::xml_schema::string&);

      useridType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      useridType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      useridType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      useridType (const useridType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual useridType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~useridType ();
    };

    class hostidType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      hostidType ();

      hostidType (const char*);

      hostidType (const ::std::string&);

      hostidType (const ::xml_schema::string&);

      hostidType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      hostidType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      hostidType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      hostidType (const hostidType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual hostidType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~hostidType ();
    };

    class passwordType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      passwordType ();

      passwordType (const char*);

      passwordType (const ::std::string&);

      passwordType (const ::xml_schema::string&);

      passwordType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      passwordType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      passwordType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      passwordType (const passwordType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual passwordType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~passwordType ();
    };

    class fileidType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      fileidType ();

      fileidType (const char*);

      fileidType (const ::std::string&);

      fileidType (const ::xml_schema::string&);

      fileidType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      fileidType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      fileidType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      fileidType (const fileidType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual fileidType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~fileidType ();
    };

    class filepathType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      filepathType ();

      filepathType (const char*);

      filepathType (const ::std::string&);

      filepathType (const ::xml_schema::string&);

      filepathType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      filepathType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      filepathType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      filepathType (const filepathType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual filepathType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filepathType ();
    };

    class emailType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      emailType ();

      emailType (const char*);

      emailType (const ::std::string&);

      emailType (const ::xml_schema::string&);

      emailType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      emailType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      emailType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      emailType (const emailType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual emailType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~emailType ();
    };

    class filecontentType: public ::xml_schema::string
    {
      public:
      // Constructors.
      //
      filecontentType ();

      filecontentType (const char*);

      filecontentType (const ::std::string&);

      filecontentType (const ::xml_schema::string&);

      filecontentType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      filecontentType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      filecontentType (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      filecontentType (const filecontentType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual filecontentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filecontentType ();
    };

    class actionType: public ::xml_schema::string
    {
      public:
      enum value
      {
        request,
        response
      };

      actionType (value v);

      actionType (const char* v);

      actionType (const ::std::string& v);

      actionType (const ::xml_schema::string& v);

      actionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      actionType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      actionType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      actionType (const actionType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual actionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      actionType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_actionType_convert ();
      }

      protected:
      value
      _xsd_actionType_convert () const;

      public:
      static const char* const _xsd_actionType_literals_[2];
      static const value _xsd_actionType_indexes_[2];
    };

    class filelengthType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      filelengthType (const ::xml_schema::integer&);

      filelengthType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      filelengthType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      filelengthType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      filelengthType (const filelengthType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual filelengthType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filelengthType ();
    };

    class registerRequestMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // password
      // 
      typedef ::honeybadger::message::passwordType password_type;
      typedef ::xsd::cxx::tree::traits< password_type, char > password_traits;

      const password_type&
      password () const;

      password_type&
      password ();

      void
      password (const password_type& x);

      void
      password (::std::auto_ptr< password_type > p);

      // email
      // 
      typedef ::honeybadger::message::emailType email_type;
      typedef ::xsd::cxx::tree::traits< email_type, char > email_traits;

      const email_type&
      email () const;

      email_type&
      email ();

      void
      email (const email_type& x);

      void
      email (::std::auto_ptr< email_type > p);

      // Constructors.
      //
      registerRequestMessageType (const userid_type&,
                                  const password_type&,
                                  const email_type&);

      registerRequestMessageType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      registerRequestMessageType (const registerRequestMessageType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual registerRequestMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~registerRequestMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< password_type > password_;
      ::xsd::cxx::tree::one< email_type > email_;
    };

    class registerResponseMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // result
      // 
      typedef ::xml_schema::integer result_type;
      typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

      const result_type&
      result () const;

      result_type&
      result ();

      void
      result (const result_type& x);

      // details
      // 
      typedef ::xml_schema::string details_type;
      typedef ::xsd::cxx::tree::optional< details_type > details_optional;
      typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

      const details_optional&
      details () const;

      details_optional&
      details ();

      void
      details (const details_type& x);

      void
      details (const details_optional& x);

      void
      details (::std::auto_ptr< details_type > p);

      // Constructors.
      //
      registerResponseMessageType (const userid_type&,
                                   const result_type&);

      registerResponseMessageType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      registerResponseMessageType (const registerResponseMessageType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual registerResponseMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~registerResponseMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< result_type > result_;
      details_optional details_;
    };

    class loginRequestMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // password
      // 
      typedef ::honeybadger::message::passwordType password_type;
      typedef ::xsd::cxx::tree::traits< password_type, char > password_traits;

      const password_type&
      password () const;

      password_type&
      password ();

      void
      password (const password_type& x);

      void
      password (::std::auto_ptr< password_type > p);

      // Constructors.
      //
      loginRequestMessageType (const userid_type&,
                               const password_type&);

      loginRequestMessageType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      loginRequestMessageType (const loginRequestMessageType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual loginRequestMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~loginRequestMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< password_type > password_;
    };

    class loginResponseMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // result
      // 
      typedef ::xml_schema::integer result_type;
      typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

      const result_type&
      result () const;

      result_type&
      result ();

      void
      result (const result_type& x);

      // details
      // 
      typedef ::xml_schema::string details_type;
      typedef ::xsd::cxx::tree::optional< details_type > details_optional;
      typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

      const details_optional&
      details () const;

      details_optional&
      details ();

      void
      details (const details_type& x);

      void
      details (const details_optional& x);

      void
      details (::std::auto_ptr< details_type > p);

      // Constructors.
      //
      loginResponseMessageType (const userid_type&,
                                const result_type&);

      loginResponseMessageType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      loginResponseMessageType (const loginResponseMessageType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual loginResponseMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~loginResponseMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< result_type > result_;
      details_optional details_;
    };

    class newfileRequestMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // filepath
      // 
      typedef ::honeybadger::message::filepathType filepath_type;
      typedef ::xsd::cxx::tree::traits< filepath_type, char > filepath_traits;

      const filepath_type&
      filepath () const;

      filepath_type&
      filepath ();

      void
      filepath (const filepath_type& x);

      void
      filepath (::std::auto_ptr< filepath_type > p);

      // length
      // 
      typedef ::honeybadger::message::filelengthType length_type;
      typedef ::xsd::cxx::tree::traits< length_type, char > length_traits;

      const length_type&
      length () const;

      length_type&
      length ();

      void
      length (const length_type& x);

      void
      length (::std::auto_ptr< length_type > p);

      // Constructors.
      //
      newfileRequestMessageType (const userid_type&,
                                 const fileid_type&,
                                 const filepath_type&,
                                 const length_type&);

      newfileRequestMessageType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      newfileRequestMessageType (const newfileRequestMessageType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual newfileRequestMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~newfileRequestMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< filepath_type > filepath_;
      ::xsd::cxx::tree::one< length_type > length_;
    };

    class newfileResponseMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // result
      // 
      typedef ::xml_schema::integer result_type;
      typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

      const result_type&
      result () const;

      result_type&
      result ();

      void
      result (const result_type& x);

      // details
      // 
      typedef ::xml_schema::string details_type;
      typedef ::xsd::cxx::tree::optional< details_type > details_optional;
      typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

      const details_optional&
      details () const;

      details_optional&
      details ();

      void
      details (const details_type& x);

      void
      details (const details_optional& x);

      void
      details (::std::auto_ptr< details_type > p);

      // Constructors.
      //
      newfileResponseMessageType (const userid_type&,
                                  const fileid_type&,
                                  const result_type&);

      newfileResponseMessageType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      newfileResponseMessageType (const newfileResponseMessageType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual newfileResponseMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~newfileResponseMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< result_type > result_;
      details_optional details_;
    };

    class filepatchRequestMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // path
      // 
      typedef ::honeybadger::message::filepathType path_type;
      typedef ::xsd::cxx::tree::traits< path_type, char > path_traits;

      const path_type&
      path () const;

      path_type&
      path ();

      void
      path (const path_type& x);

      void
      path (::std::auto_ptr< path_type > p);

      // Constructors.
      //
      filepatchRequestMessageType (const userid_type&,
                                   const fileid_type&,
                                   const path_type&);

      filepatchRequestMessageType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      filepatchRequestMessageType (const filepatchRequestMessageType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual filepatchRequestMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filepatchRequestMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< path_type > path_;
    };

    class filepatchResponseMessageType: public ::xml_schema::type
    {
      public:
      // userid
      // 
      typedef ::honeybadger::message::useridType userid_type;
      typedef ::xsd::cxx::tree::traits< userid_type, char > userid_traits;

      const userid_type&
      userid () const;

      userid_type&
      userid ();

      void
      userid (const userid_type& x);

      void
      userid (::std::auto_ptr< userid_type > p);

      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // result
      // 
      typedef ::xml_schema::integer result_type;
      typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

      const result_type&
      result () const;

      result_type&
      result ();

      void
      result (const result_type& x);

      // details
      // 
      typedef ::xml_schema::string details_type;
      typedef ::xsd::cxx::tree::optional< details_type > details_optional;
      typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

      const details_optional&
      details () const;

      details_optional&
      details ();

      void
      details (const details_type& x);

      void
      details (const details_optional& x);

      void
      details (::std::auto_ptr< details_type > p);

      // Constructors.
      //
      filepatchResponseMessageType (const userid_type&,
                                    const fileid_type&,
                                    const result_type&);

      filepatchResponseMessageType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      filepatchResponseMessageType (const filepatchResponseMessageType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual filepatchResponseMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filepatchResponseMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< userid_type > userid_;
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< result_type > result_;
      details_optional details_;
    };

    class filecontentRequestMessageType: public ::xml_schema::type
    {
      public:
      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // content
      // 
      typedef ::xml_schema::base64_binary content_type;
      typedef ::xsd::cxx::tree::traits< content_type, char > content_traits;

      const content_type&
      content () const;

      content_type&
      content ();

      void
      content (const content_type& x);

      void
      content (::std::auto_ptr< content_type > p);

      // Constructors.
      //
      filecontentRequestMessageType (const fileid_type&,
                                     const content_type&);

      filecontentRequestMessageType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      filecontentRequestMessageType (const filecontentRequestMessageType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual filecontentRequestMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filecontentRequestMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< content_type > content_;
    };

    class filecontentResponseMessageType: public ::xml_schema::type
    {
      public:
      // fileid
      // 
      typedef ::honeybadger::message::fileidType fileid_type;
      typedef ::xsd::cxx::tree::traits< fileid_type, char > fileid_traits;

      const fileid_type&
      fileid () const;

      fileid_type&
      fileid ();

      void
      fileid (const fileid_type& x);

      void
      fileid (::std::auto_ptr< fileid_type > p);

      // result
      // 
      typedef ::xml_schema::integer result_type;
      typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

      const result_type&
      result () const;

      result_type&
      result ();

      void
      result (const result_type& x);

      // details
      // 
      typedef ::xml_schema::string details_type;
      typedef ::xsd::cxx::tree::optional< details_type > details_optional;
      typedef ::xsd::cxx::tree::traits< details_type, char > details_traits;

      const details_optional&
      details () const;

      details_optional&
      details ();

      void
      details (const details_type& x);

      void
      details (const details_optional& x);

      void
      details (::std::auto_ptr< details_type > p);

      // Constructors.
      //
      filecontentResponseMessageType (const fileid_type&,
                                      const result_type&);

      filecontentResponseMessageType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      filecontentResponseMessageType (const filecontentResponseMessageType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual filecontentResponseMessageType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~filecontentResponseMessageType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< fileid_type > fileid_;
      ::xsd::cxx::tree::one< result_type > result_;
      details_optional details_;
    };

    class HBMessages: public ::xml_schema::type
    {
      public:
      // registerRequest
      // 
      typedef ::honeybadger::message::registerRequestMessageType registerRequest_type;
      typedef ::xsd::cxx::tree::sequence< registerRequest_type > registerRequest_sequence;
      typedef registerRequest_sequence::iterator registerRequest_iterator;
      typedef registerRequest_sequence::const_iterator registerRequest_const_iterator;
      typedef ::xsd::cxx::tree::traits< registerRequest_type, char > registerRequest_traits;

      const registerRequest_sequence&
      registerRequest () const;

      registerRequest_sequence&
      registerRequest ();

      void
      registerRequest (const registerRequest_sequence& s);

      // registerResponse
      // 
      typedef ::honeybadger::message::registerResponseMessageType registerResponse_type;
      typedef ::xsd::cxx::tree::sequence< registerResponse_type > registerResponse_sequence;
      typedef registerResponse_sequence::iterator registerResponse_iterator;
      typedef registerResponse_sequence::const_iterator registerResponse_const_iterator;
      typedef ::xsd::cxx::tree::traits< registerResponse_type, char > registerResponse_traits;

      const registerResponse_sequence&
      registerResponse () const;

      registerResponse_sequence&
      registerResponse ();

      void
      registerResponse (const registerResponse_sequence& s);

      // loginRequest
      // 
      typedef ::honeybadger::message::loginRequestMessageType loginRequest_type;
      typedef ::xsd::cxx::tree::sequence< loginRequest_type > loginRequest_sequence;
      typedef loginRequest_sequence::iterator loginRequest_iterator;
      typedef loginRequest_sequence::const_iterator loginRequest_const_iterator;
      typedef ::xsd::cxx::tree::traits< loginRequest_type, char > loginRequest_traits;

      const loginRequest_sequence&
      loginRequest () const;

      loginRequest_sequence&
      loginRequest ();

      void
      loginRequest (const loginRequest_sequence& s);

      // loginResponse
      // 
      typedef ::honeybadger::message::loginResponseMessageType loginResponse_type;
      typedef ::xsd::cxx::tree::sequence< loginResponse_type > loginResponse_sequence;
      typedef loginResponse_sequence::iterator loginResponse_iterator;
      typedef loginResponse_sequence::const_iterator loginResponse_const_iterator;
      typedef ::xsd::cxx::tree::traits< loginResponse_type, char > loginResponse_traits;

      const loginResponse_sequence&
      loginResponse () const;

      loginResponse_sequence&
      loginResponse ();

      void
      loginResponse (const loginResponse_sequence& s);

      // newfileRequest
      // 
      typedef ::honeybadger::message::newfileRequestMessageType newfileRequest_type;
      typedef ::xsd::cxx::tree::sequence< newfileRequest_type > newfileRequest_sequence;
      typedef newfileRequest_sequence::iterator newfileRequest_iterator;
      typedef newfileRequest_sequence::const_iterator newfileRequest_const_iterator;
      typedef ::xsd::cxx::tree::traits< newfileRequest_type, char > newfileRequest_traits;

      const newfileRequest_sequence&
      newfileRequest () const;

      newfileRequest_sequence&
      newfileRequest ();

      void
      newfileRequest (const newfileRequest_sequence& s);

      // newfileResponse
      // 
      typedef ::honeybadger::message::newfileResponseMessageType newfileResponse_type;
      typedef ::xsd::cxx::tree::sequence< newfileResponse_type > newfileResponse_sequence;
      typedef newfileResponse_sequence::iterator newfileResponse_iterator;
      typedef newfileResponse_sequence::const_iterator newfileResponse_const_iterator;
      typedef ::xsd::cxx::tree::traits< newfileResponse_type, char > newfileResponse_traits;

      const newfileResponse_sequence&
      newfileResponse () const;

      newfileResponse_sequence&
      newfileResponse ();

      void
      newfileResponse (const newfileResponse_sequence& s);

      // filepatchRequest
      // 
      typedef ::honeybadger::message::filepatchRequestMessageType filepatchRequest_type;
      typedef ::xsd::cxx::tree::sequence< filepatchRequest_type > filepatchRequest_sequence;
      typedef filepatchRequest_sequence::iterator filepatchRequest_iterator;
      typedef filepatchRequest_sequence::const_iterator filepatchRequest_const_iterator;
      typedef ::xsd::cxx::tree::traits< filepatchRequest_type, char > filepatchRequest_traits;

      const filepatchRequest_sequence&
      filepatchRequest () const;

      filepatchRequest_sequence&
      filepatchRequest ();

      void
      filepatchRequest (const filepatchRequest_sequence& s);

      // filepatchResponse
      // 
      typedef ::honeybadger::message::filepatchResponseMessageType filepatchResponse_type;
      typedef ::xsd::cxx::tree::sequence< filepatchResponse_type > filepatchResponse_sequence;
      typedef filepatchResponse_sequence::iterator filepatchResponse_iterator;
      typedef filepatchResponse_sequence::const_iterator filepatchResponse_const_iterator;
      typedef ::xsd::cxx::tree::traits< filepatchResponse_type, char > filepatchResponse_traits;

      const filepatchResponse_sequence&
      filepatchResponse () const;

      filepatchResponse_sequence&
      filepatchResponse ();

      void
      filepatchResponse (const filepatchResponse_sequence& s);

      // filecontentRequest
      // 
      typedef ::honeybadger::message::filecontentRequestMessageType filecontentRequest_type;
      typedef ::xsd::cxx::tree::sequence< filecontentRequest_type > filecontentRequest_sequence;
      typedef filecontentRequest_sequence::iterator filecontentRequest_iterator;
      typedef filecontentRequest_sequence::const_iterator filecontentRequest_const_iterator;
      typedef ::xsd::cxx::tree::traits< filecontentRequest_type, char > filecontentRequest_traits;

      const filecontentRequest_sequence&
      filecontentRequest () const;

      filecontentRequest_sequence&
      filecontentRequest ();

      void
      filecontentRequest (const filecontentRequest_sequence& s);

      // filecontentResponse
      // 
      typedef ::honeybadger::message::filecontentResponseMessageType filecontentResponse_type;
      typedef ::xsd::cxx::tree::sequence< filecontentResponse_type > filecontentResponse_sequence;
      typedef filecontentResponse_sequence::iterator filecontentResponse_iterator;
      typedef filecontentResponse_sequence::const_iterator filecontentResponse_const_iterator;
      typedef ::xsd::cxx::tree::traits< filecontentResponse_type, char > filecontentResponse_traits;

      const filecontentResponse_sequence&
      filecontentResponse () const;

      filecontentResponse_sequence&
      filecontentResponse ();

      void
      filecontentResponse (const filecontentResponse_sequence& s);

      // Constructors.
      //
      HBMessages ();

      HBMessages (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      HBMessages (const HBMessages& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual HBMessages*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HBMessages ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::flags);

      protected:
      registerRequest_sequence registerRequest_;
      registerResponse_sequence registerResponse_;
      loginRequest_sequence loginRequest_;
      loginResponse_sequence loginResponse_;
      newfileRequest_sequence newfileRequest_;
      newfileResponse_sequence newfileResponse_;
      filepatchRequest_sequence filepatchRequest_;
      filepatchResponse_sequence filepatchResponse_;
      filecontentRequest_sequence filecontentRequest_;
      filecontentResponse_sequence filecontentResponse_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace honeybadger
{
  namespace message
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___HONEYBADGER_HXX
