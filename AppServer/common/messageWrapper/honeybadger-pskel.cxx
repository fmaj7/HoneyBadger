// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "honeybadger-pskel.hxx"

namespace honeybadger
{
  namespace message
  {
    // registerRequestMessageType_pskel
    //

    void registerRequestMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void registerRequestMessageType_pskel::
    password_parser (::honeybadger::message::passwordType_pskel& p)
    {
      this->password_parser_ = &p;
    }

    void registerRequestMessageType_pskel::
    email_parser (::honeybadger::message::emailType_pskel& p)
    {
      this->email_parser_ = &p;
    }

    void registerRequestMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::passwordType_pskel& password,
             ::honeybadger::message::emailType_pskel& email)
    {
      this->userid_parser_ = &userid;
      this->password_parser_ = &password;
      this->email_parser_ = &email;
    }

    registerRequestMessageType_pskel::
    registerRequestMessageType_pskel ()
    : userid_parser_ (0),
      password_parser_ (0),
      email_parser_ (0)
    {
    }

    // registerResponseMessageType_pskel
    //

    void registerResponseMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void registerResponseMessageType_pskel::
    result_parser (::xml_schema::integer_pskel& p)
    {
      this->result_parser_ = &p;
    }

    void registerResponseMessageType_pskel::
    details_parser (::xml_schema::string_pskel& p)
    {
      this->details_parser_ = &p;
    }

    void registerResponseMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::xml_schema::integer_pskel& result,
             ::xml_schema::string_pskel& details)
    {
      this->userid_parser_ = &userid;
      this->result_parser_ = &result;
      this->details_parser_ = &details;
    }

    registerResponseMessageType_pskel::
    registerResponseMessageType_pskel ()
    : userid_parser_ (0),
      result_parser_ (0),
      details_parser_ (0)
    {
    }

    // loginRequestMessageType_pskel
    //

    void loginRequestMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void loginRequestMessageType_pskel::
    password_parser (::honeybadger::message::passwordType_pskel& p)
    {
      this->password_parser_ = &p;
    }

    void loginRequestMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::passwordType_pskel& password)
    {
      this->userid_parser_ = &userid;
      this->password_parser_ = &password;
    }

    loginRequestMessageType_pskel::
    loginRequestMessageType_pskel ()
    : userid_parser_ (0),
      password_parser_ (0)
    {
    }

    // loginResponseMessageType_pskel
    //

    void loginResponseMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void loginResponseMessageType_pskel::
    result_parser (::xml_schema::integer_pskel& p)
    {
      this->result_parser_ = &p;
    }

    void loginResponseMessageType_pskel::
    details_parser (::xml_schema::string_pskel& p)
    {
      this->details_parser_ = &p;
    }

    void loginResponseMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::xml_schema::integer_pskel& result,
             ::xml_schema::string_pskel& details)
    {
      this->userid_parser_ = &userid;
      this->result_parser_ = &result;
      this->details_parser_ = &details;
    }

    loginResponseMessageType_pskel::
    loginResponseMessageType_pskel ()
    : userid_parser_ (0),
      result_parser_ (0),
      details_parser_ (0)
    {
    }

    // newfileRequestMessageType_pskel
    //

    void newfileRequestMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void newfileRequestMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void newfileRequestMessageType_pskel::
    filepath_parser (::honeybadger::message::filepathType_pskel& p)
    {
      this->filepath_parser_ = &p;
    }

    void newfileRequestMessageType_pskel::
    length_parser (::honeybadger::message::filelengthType_pskel& p)
    {
      this->length_parser_ = &p;
    }

    void newfileRequestMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::fileidType_pskel& fileid,
             ::honeybadger::message::filepathType_pskel& filepath,
             ::honeybadger::message::filelengthType_pskel& length)
    {
      this->userid_parser_ = &userid;
      this->fileid_parser_ = &fileid;
      this->filepath_parser_ = &filepath;
      this->length_parser_ = &length;
    }

    newfileRequestMessageType_pskel::
    newfileRequestMessageType_pskel ()
    : userid_parser_ (0),
      fileid_parser_ (0),
      filepath_parser_ (0),
      length_parser_ (0)
    {
    }

    // newfileResponseMessageType_pskel
    //

    void newfileResponseMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void newfileResponseMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void newfileResponseMessageType_pskel::
    result_parser (::xml_schema::integer_pskel& p)
    {
      this->result_parser_ = &p;
    }

    void newfileResponseMessageType_pskel::
    details_parser (::xml_schema::string_pskel& p)
    {
      this->details_parser_ = &p;
    }

    void newfileResponseMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::fileidType_pskel& fileid,
             ::xml_schema::integer_pskel& result,
             ::xml_schema::string_pskel& details)
    {
      this->userid_parser_ = &userid;
      this->fileid_parser_ = &fileid;
      this->result_parser_ = &result;
      this->details_parser_ = &details;
    }

    newfileResponseMessageType_pskel::
    newfileResponseMessageType_pskel ()
    : userid_parser_ (0),
      fileid_parser_ (0),
      result_parser_ (0),
      details_parser_ (0)
    {
    }

    // filepatchRequestMessageType_pskel
    //

    void filepatchRequestMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void filepatchRequestMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void filepatchRequestMessageType_pskel::
    path_parser (::honeybadger::message::filepathType_pskel& p)
    {
      this->path_parser_ = &p;
    }

    void filepatchRequestMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::fileidType_pskel& fileid,
             ::honeybadger::message::filepathType_pskel& path)
    {
      this->userid_parser_ = &userid;
      this->fileid_parser_ = &fileid;
      this->path_parser_ = &path;
    }

    filepatchRequestMessageType_pskel::
    filepatchRequestMessageType_pskel ()
    : userid_parser_ (0),
      fileid_parser_ (0),
      path_parser_ (0)
    {
    }

    // filepatchResponseMessageType_pskel
    //

    void filepatchResponseMessageType_pskel::
    userid_parser (::honeybadger::message::useridType_pskel& p)
    {
      this->userid_parser_ = &p;
    }

    void filepatchResponseMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void filepatchResponseMessageType_pskel::
    result_parser (::xml_schema::integer_pskel& p)
    {
      this->result_parser_ = &p;
    }

    void filepatchResponseMessageType_pskel::
    details_parser (::xml_schema::string_pskel& p)
    {
      this->details_parser_ = &p;
    }

    void filepatchResponseMessageType_pskel::
    parsers (::honeybadger::message::useridType_pskel& userid,
             ::honeybadger::message::fileidType_pskel& fileid,
             ::xml_schema::integer_pskel& result,
             ::xml_schema::string_pskel& details)
    {
      this->userid_parser_ = &userid;
      this->fileid_parser_ = &fileid;
      this->result_parser_ = &result;
      this->details_parser_ = &details;
    }

    filepatchResponseMessageType_pskel::
    filepatchResponseMessageType_pskel ()
    : userid_parser_ (0),
      fileid_parser_ (0),
      result_parser_ (0),
      details_parser_ (0)
    {
    }

    // filecontentRequestMessageType_pskel
    //

    void filecontentRequestMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void filecontentRequestMessageType_pskel::
    content_parser (::xml_schema::base64_binary_pskel& p)
    {
      this->content_parser_ = &p;
    }

    void filecontentRequestMessageType_pskel::
    parsers (::honeybadger::message::fileidType_pskel& fileid,
             ::xml_schema::base64_binary_pskel& content)
    {
      this->fileid_parser_ = &fileid;
      this->content_parser_ = &content;
    }

    filecontentRequestMessageType_pskel::
    filecontentRequestMessageType_pskel ()
    : fileid_parser_ (0),
      content_parser_ (0)
    {
    }

    // filecontentResponseMessageType_pskel
    //

    void filecontentResponseMessageType_pskel::
    fileid_parser (::honeybadger::message::fileidType_pskel& p)
    {
      this->fileid_parser_ = &p;
    }

    void filecontentResponseMessageType_pskel::
    result_parser (::xml_schema::integer_pskel& p)
    {
      this->result_parser_ = &p;
    }

    void filecontentResponseMessageType_pskel::
    details_parser (::xml_schema::string_pskel& p)
    {
      this->details_parser_ = &p;
    }

    void filecontentResponseMessageType_pskel::
    parsers (::honeybadger::message::fileidType_pskel& fileid,
             ::xml_schema::integer_pskel& result,
             ::xml_schema::string_pskel& details)
    {
      this->fileid_parser_ = &fileid;
      this->result_parser_ = &result;
      this->details_parser_ = &details;
    }

    filecontentResponseMessageType_pskel::
    filecontentResponseMessageType_pskel ()
    : fileid_parser_ (0),
      result_parser_ (0),
      details_parser_ (0)
    {
    }

    // HBMessages_pskel
    //

    void HBMessages_pskel::
    registerRequest_parser (::honeybadger::message::registerRequestMessageType_pskel& p)
    {
      this->registerRequest_parser_ = &p;
    }

    void HBMessages_pskel::
    registerResponse_parser (::honeybadger::message::registerResponseMessageType_pskel& p)
    {
      this->registerResponse_parser_ = &p;
    }

    void HBMessages_pskel::
    loginRequest_parser (::honeybadger::message::loginRequestMessageType_pskel& p)
    {
      this->loginRequest_parser_ = &p;
    }

    void HBMessages_pskel::
    loginResponse_parser (::honeybadger::message::loginResponseMessageType_pskel& p)
    {
      this->loginResponse_parser_ = &p;
    }

    void HBMessages_pskel::
    newfileRequest_parser (::honeybadger::message::newfileRequestMessageType_pskel& p)
    {
      this->newfileRequest_parser_ = &p;
    }

    void HBMessages_pskel::
    newfileResponse_parser (::honeybadger::message::newfileResponseMessageType_pskel& p)
    {
      this->newfileResponse_parser_ = &p;
    }

    void HBMessages_pskel::
    filepatchRequest_parser (::honeybadger::message::filepatchRequestMessageType_pskel& p)
    {
      this->filepatchRequest_parser_ = &p;
    }

    void HBMessages_pskel::
    filepatchResponse_parser (::honeybadger::message::filepatchResponseMessageType_pskel& p)
    {
      this->filepatchResponse_parser_ = &p;
    }

    void HBMessages_pskel::
    filecontentRequest_parser (::honeybadger::message::filecontentRequestMessageType_pskel& p)
    {
      this->filecontentRequest_parser_ = &p;
    }

    void HBMessages_pskel::
    filecontentResponse_parser (::honeybadger::message::filecontentResponseMessageType_pskel& p)
    {
      this->filecontentResponse_parser_ = &p;
    }

    void HBMessages_pskel::
    parsers (::honeybadger::message::registerRequestMessageType_pskel& registerRequest,
             ::honeybadger::message::registerResponseMessageType_pskel& registerResponse,
             ::honeybadger::message::loginRequestMessageType_pskel& loginRequest,
             ::honeybadger::message::loginResponseMessageType_pskel& loginResponse,
             ::honeybadger::message::newfileRequestMessageType_pskel& newfileRequest,
             ::honeybadger::message::newfileResponseMessageType_pskel& newfileResponse,
             ::honeybadger::message::filepatchRequestMessageType_pskel& filepatchRequest,
             ::honeybadger::message::filepatchResponseMessageType_pskel& filepatchResponse,
             ::honeybadger::message::filecontentRequestMessageType_pskel& filecontentRequest,
             ::honeybadger::message::filecontentResponseMessageType_pskel& filecontentResponse)
    {
      this->registerRequest_parser_ = &registerRequest;
      this->registerResponse_parser_ = &registerResponse;
      this->loginRequest_parser_ = &loginRequest;
      this->loginResponse_parser_ = &loginResponse;
      this->newfileRequest_parser_ = &newfileRequest;
      this->newfileResponse_parser_ = &newfileResponse;
      this->filepatchRequest_parser_ = &filepatchRequest;
      this->filepatchResponse_parser_ = &filepatchResponse;
      this->filecontentRequest_parser_ = &filecontentRequest;
      this->filecontentResponse_parser_ = &filecontentResponse;
    }

    HBMessages_pskel::
    HBMessages_pskel ()
    : registerRequest_parser_ (0),
      registerResponse_parser_ (0),
      loginRequest_parser_ (0),
      loginResponse_parser_ (0),
      newfileRequest_parser_ (0),
      newfileResponse_parser_ (0),
      filepatchRequest_parser_ (0),
      filepatchResponse_parser_ (0),
      filecontentRequest_parser_ (0),
      filecontentResponse_parser_ (0)
    {
    }
  }
}

namespace honeybadger
{
  namespace message
  {
    // useridType_pskel
    //

    void useridType_pskel::
    post_useridType ()
    {
    }

    // hostidType_pskel
    //

    void hostidType_pskel::
    post_hostidType ()
    {
    }

    // passwordType_pskel
    //

    void passwordType_pskel::
    post_passwordType ()
    {
    }

    // fileidType_pskel
    //

    void fileidType_pskel::
    post_fileidType ()
    {
    }

    // filepathType_pskel
    //

    void filepathType_pskel::
    post_filepathType ()
    {
    }

    // emailType_pskel
    //

    void emailType_pskel::
    post_emailType ()
    {
    }

    // filecontentType_pskel
    //

    void filecontentType_pskel::
    post_filecontentType ()
    {
    }

    // actionType_pskel
    //

    void actionType_pskel::
    post_actionType ()
    {
    }

    // filelengthType_pskel
    //

    void filelengthType_pskel::
    post_filelengthType ()
    {
    }

    // registerRequestMessageType_pskel
    //

    void registerRequestMessageType_pskel::
    userid ()
    {
    }

    void registerRequestMessageType_pskel::
    password ()
    {
    }

    void registerRequestMessageType_pskel::
    email ()
    {
    }

    void registerRequestMessageType_pskel::
    post_registerRequestMessageType ()
    {
    }

    bool registerRequestMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "password" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->password_parser_;

        if (this->password_parser_)
          this->password_parser_->pre ();

        return true;
      }

      if (n == "email" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->email_parser_;

        if (this->email_parser_)
          this->email_parser_->pre ();

        return true;
      }

      return false;
    }

    bool registerRequestMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "password" && ns == "http://www.honeybadger.com")
      {
        if (this->password_parser_)
        {
          this->password_parser_->post_passwordType ();
          this->password ();
        }

        return true;
      }

      if (n == "email" && ns == "http://www.honeybadger.com")
      {
        if (this->email_parser_)
        {
          this->email_parser_->post_emailType ();
          this->email ();
        }

        return true;
      }

      return false;
    }

    // registerResponseMessageType_pskel
    //

    void registerResponseMessageType_pskel::
    userid ()
    {
    }

    void registerResponseMessageType_pskel::
    result (long long)
    {
    }

    void registerResponseMessageType_pskel::
    details (const ::std::string&)
    {
    }

    void registerResponseMessageType_pskel::
    post_registerResponseMessageType ()
    {
    }

    bool registerResponseMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->result_parser_;

        if (this->result_parser_)
          this->result_parser_->pre ();

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->details_parser_;

        if (this->details_parser_)
          this->details_parser_->pre ();

        return true;
      }

      return false;
    }

    bool registerResponseMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        if (this->result_parser_)
          this->result (this->result_parser_->post_integer ());

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        if (this->details_parser_)
          this->details (this->details_parser_->post_string ());

        return true;
      }

      return false;
    }

    // loginRequestMessageType_pskel
    //

    void loginRequestMessageType_pskel::
    userid ()
    {
    }

    void loginRequestMessageType_pskel::
    password ()
    {
    }

    void loginRequestMessageType_pskel::
    post_loginRequestMessageType ()
    {
    }

    bool loginRequestMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "password" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->password_parser_;

        if (this->password_parser_)
          this->password_parser_->pre ();

        return true;
      }

      return false;
    }

    bool loginRequestMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "password" && ns == "http://www.honeybadger.com")
      {
        if (this->password_parser_)
        {
          this->password_parser_->post_passwordType ();
          this->password ();
        }

        return true;
      }

      return false;
    }

    // loginResponseMessageType_pskel
    //

    void loginResponseMessageType_pskel::
    userid ()
    {
    }

    void loginResponseMessageType_pskel::
    result (long long)
    {
    }

    void loginResponseMessageType_pskel::
    details (const ::std::string&)
    {
    }

    void loginResponseMessageType_pskel::
    post_loginResponseMessageType ()
    {
    }

    bool loginResponseMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->result_parser_;

        if (this->result_parser_)
          this->result_parser_->pre ();

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->details_parser_;

        if (this->details_parser_)
          this->details_parser_->pre ();

        return true;
      }

      return false;
    }

    bool loginResponseMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        if (this->result_parser_)
          this->result (this->result_parser_->post_integer ());

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        if (this->details_parser_)
          this->details (this->details_parser_->post_string ());

        return true;
      }

      return false;
    }

    // newfileRequestMessageType_pskel
    //

    void newfileRequestMessageType_pskel::
    userid ()
    {
    }

    void newfileRequestMessageType_pskel::
    fileid ()
    {
    }

    void newfileRequestMessageType_pskel::
    filepath ()
    {
    }

    void newfileRequestMessageType_pskel::
    length ()
    {
    }

    void newfileRequestMessageType_pskel::
    post_newfileRequestMessageType ()
    {
    }

    bool newfileRequestMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "filepath" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->filepath_parser_;

        if (this->filepath_parser_)
          this->filepath_parser_->pre ();

        return true;
      }

      if (n == "length" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->length_parser_;

        if (this->length_parser_)
          this->length_parser_->pre ();

        return true;
      }

      return false;
    }

    bool newfileRequestMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "filepath" && ns == "http://www.honeybadger.com")
      {
        if (this->filepath_parser_)
        {
          this->filepath_parser_->post_filepathType ();
          this->filepath ();
        }

        return true;
      }

      if (n == "length" && ns == "http://www.honeybadger.com")
      {
        if (this->length_parser_)
        {
          this->length_parser_->post_filelengthType ();
          this->length ();
        }

        return true;
      }

      return false;
    }

    // newfileResponseMessageType_pskel
    //

    void newfileResponseMessageType_pskel::
    userid ()
    {
    }

    void newfileResponseMessageType_pskel::
    fileid ()
    {
    }

    void newfileResponseMessageType_pskel::
    result (long long)
    {
    }

    void newfileResponseMessageType_pskel::
    details (const ::std::string&)
    {
    }

    void newfileResponseMessageType_pskel::
    post_newfileResponseMessageType ()
    {
    }

    bool newfileResponseMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->result_parser_;

        if (this->result_parser_)
          this->result_parser_->pre ();

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->details_parser_;

        if (this->details_parser_)
          this->details_parser_->pre ();

        return true;
      }

      return false;
    }

    bool newfileResponseMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        if (this->result_parser_)
          this->result (this->result_parser_->post_integer ());

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        if (this->details_parser_)
          this->details (this->details_parser_->post_string ());

        return true;
      }

      return false;
    }

    // filepatchRequestMessageType_pskel
    //

    void filepatchRequestMessageType_pskel::
    userid ()
    {
    }

    void filepatchRequestMessageType_pskel::
    fileid ()
    {
    }

    void filepatchRequestMessageType_pskel::
    path ()
    {
    }

    void filepatchRequestMessageType_pskel::
    post_filepatchRequestMessageType ()
    {
    }

    bool filepatchRequestMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "path" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->path_parser_;

        if (this->path_parser_)
          this->path_parser_->pre ();

        return true;
      }

      return false;
    }

    bool filepatchRequestMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "path" && ns == "http://www.honeybadger.com")
      {
        if (this->path_parser_)
        {
          this->path_parser_->post_filepathType ();
          this->path ();
        }

        return true;
      }

      return false;
    }

    // filepatchResponseMessageType_pskel
    //

    void filepatchResponseMessageType_pskel::
    userid ()
    {
    }

    void filepatchResponseMessageType_pskel::
    fileid ()
    {
    }

    void filepatchResponseMessageType_pskel::
    result (long long)
    {
    }

    void filepatchResponseMessageType_pskel::
    details (const ::std::string&)
    {
    }

    void filepatchResponseMessageType_pskel::
    post_filepatchResponseMessageType ()
    {
    }

    bool filepatchResponseMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->userid_parser_;

        if (this->userid_parser_)
          this->userid_parser_->pre ();

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->result_parser_;

        if (this->result_parser_)
          this->result_parser_->pre ();

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->details_parser_;

        if (this->details_parser_)
          this->details_parser_->pre ();

        return true;
      }

      return false;
    }

    bool filepatchResponseMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "userid" && ns == "http://www.honeybadger.com")
      {
        if (this->userid_parser_)
        {
          this->userid_parser_->post_useridType ();
          this->userid ();
        }

        return true;
      }

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        if (this->result_parser_)
          this->result (this->result_parser_->post_integer ());

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        if (this->details_parser_)
          this->details (this->details_parser_->post_string ());

        return true;
      }

      return false;
    }

    // filecontentRequestMessageType_pskel
    //

    void filecontentRequestMessageType_pskel::
    fileid ()
    {
    }

    void filecontentRequestMessageType_pskel::
    content (::std::auto_ptr< ::xml_schema::buffer >)
    {
    }

    void filecontentRequestMessageType_pskel::
    post_filecontentRequestMessageType ()
    {
    }

    bool filecontentRequestMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "content" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->content_parser_;

        if (this->content_parser_)
          this->content_parser_->pre ();

        return true;
      }

      return false;
    }

    bool filecontentRequestMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "content" && ns == "http://www.honeybadger.com")
      {
        if (this->content_parser_)
          this->content (this->content_parser_->post_base64_binary ());

        return true;
      }

      return false;
    }

    // filecontentResponseMessageType_pskel
    //

    void filecontentResponseMessageType_pskel::
    fileid ()
    {
    }

    void filecontentResponseMessageType_pskel::
    result (long long)
    {
    }

    void filecontentResponseMessageType_pskel::
    details (const ::std::string&)
    {
    }

    void filecontentResponseMessageType_pskel::
    post_filecontentResponseMessageType ()
    {
    }

    bool filecontentResponseMessageType_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->fileid_parser_;

        if (this->fileid_parser_)
          this->fileid_parser_->pre ();

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->result_parser_;

        if (this->result_parser_)
          this->result_parser_->pre ();

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->details_parser_;

        if (this->details_parser_)
          this->details_parser_->pre ();

        return true;
      }

      return false;
    }

    bool filecontentResponseMessageType_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "fileid" && ns == "http://www.honeybadger.com")
      {
        if (this->fileid_parser_)
        {
          this->fileid_parser_->post_fileidType ();
          this->fileid ();
        }

        return true;
      }

      if (n == "result" && ns == "http://www.honeybadger.com")
      {
        if (this->result_parser_)
          this->result (this->result_parser_->post_integer ());

        return true;
      }

      if (n == "details" && ns == "http://www.honeybadger.com")
      {
        if (this->details_parser_)
          this->details (this->details_parser_->post_string ());

        return true;
      }

      return false;
    }

    // HBMessages_pskel
    //

    void HBMessages_pskel::
    registerRequest ()
    {
    }

    void HBMessages_pskel::
    registerResponse ()
    {
    }

    void HBMessages_pskel::
    loginRequest ()
    {
    }

    void HBMessages_pskel::
    loginResponse ()
    {
    }

    void HBMessages_pskel::
    newfileRequest ()
    {
    }

    void HBMessages_pskel::
    newfileResponse ()
    {
    }

    void HBMessages_pskel::
    filepatchRequest ()
    {
    }

    void HBMessages_pskel::
    filepatchResponse ()
    {
    }

    void HBMessages_pskel::
    filecontentRequest ()
    {
    }

    void HBMessages_pskel::
    filecontentResponse ()
    {
    }

    void HBMessages_pskel::
    post_HBMessages ()
    {
    }

    bool HBMessages_pskel::
    _start_element_impl (const ::xml_schema::ro_string& ns,
                         const ::xml_schema::ro_string& n,
                         const ::xml_schema::ro_string* t)
    {
      XSD_UNUSED (t);

      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;

      if (n == "registerRequest" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->registerRequest_parser_;

        if (this->registerRequest_parser_)
          this->registerRequest_parser_->pre ();

        return true;
      }

      if (n == "registerResponse" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->registerResponse_parser_;

        if (this->registerResponse_parser_)
          this->registerResponse_parser_->pre ();

        return true;
      }

      if (n == "loginRequest" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->loginRequest_parser_;

        if (this->loginRequest_parser_)
          this->loginRequest_parser_->pre ();

        return true;
      }

      if (n == "loginResponse" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->loginResponse_parser_;

        if (this->loginResponse_parser_)
          this->loginResponse_parser_->pre ();

        return true;
      }

      if (n == "newfileRequest" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->newfileRequest_parser_;

        if (this->newfileRequest_parser_)
          this->newfileRequest_parser_->pre ();

        return true;
      }

      if (n == "newfileResponse" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->newfileResponse_parser_;

        if (this->newfileResponse_parser_)
          this->newfileResponse_parser_->pre ();

        return true;
      }

      if (n == "filepatchRequest" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->filepatchRequest_parser_;

        if (this->filepatchRequest_parser_)
          this->filepatchRequest_parser_->pre ();

        return true;
      }

      if (n == "filepatchResponse" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->filepatchResponse_parser_;

        if (this->filepatchResponse_parser_)
          this->filepatchResponse_parser_->pre ();

        return true;
      }

      if (n == "filecontentRequest" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->filecontentRequest_parser_;

        if (this->filecontentRequest_parser_)
          this->filecontentRequest_parser_->pre ();

        return true;
      }

      if (n == "filecontentResponse" && ns == "http://www.honeybadger.com")
      {
        this->::xml_schema::complex_content::context_.top ().parser_ = this->filecontentResponse_parser_;

        if (this->filecontentResponse_parser_)
          this->filecontentResponse_parser_->pre ();

        return true;
      }

      return false;
    }

    bool HBMessages_pskel::
    _end_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n)
    {
      if (this->::xml_schema::complex_content::_end_element_impl (ns, n))
        return true;

      if (n == "registerRequest" && ns == "http://www.honeybadger.com")
      {
        if (this->registerRequest_parser_)
        {
          this->registerRequest_parser_->post_registerRequestMessageType ();
          this->registerRequest ();
        }

        return true;
      }

      if (n == "registerResponse" && ns == "http://www.honeybadger.com")
      {
        if (this->registerResponse_parser_)
        {
          this->registerResponse_parser_->post_registerResponseMessageType ();
          this->registerResponse ();
        }

        return true;
      }

      if (n == "loginRequest" && ns == "http://www.honeybadger.com")
      {
        if (this->loginRequest_parser_)
        {
          this->loginRequest_parser_->post_loginRequestMessageType ();
          this->loginRequest ();
        }

        return true;
      }

      if (n == "loginResponse" && ns == "http://www.honeybadger.com")
      {
        if (this->loginResponse_parser_)
        {
          this->loginResponse_parser_->post_loginResponseMessageType ();
          this->loginResponse ();
        }

        return true;
      }

      if (n == "newfileRequest" && ns == "http://www.honeybadger.com")
      {
        if (this->newfileRequest_parser_)
        {
          this->newfileRequest_parser_->post_newfileRequestMessageType ();
          this->newfileRequest ();
        }

        return true;
      }

      if (n == "newfileResponse" && ns == "http://www.honeybadger.com")
      {
        if (this->newfileResponse_parser_)
        {
          this->newfileResponse_parser_->post_newfileResponseMessageType ();
          this->newfileResponse ();
        }

        return true;
      }

      if (n == "filepatchRequest" && ns == "http://www.honeybadger.com")
      {
        if (this->filepatchRequest_parser_)
        {
          this->filepatchRequest_parser_->post_filepatchRequestMessageType ();
          this->filepatchRequest ();
        }

        return true;
      }

      if (n == "filepatchResponse" && ns == "http://www.honeybadger.com")
      {
        if (this->filepatchResponse_parser_)
        {
          this->filepatchResponse_parser_->post_filepatchResponseMessageType ();
          this->filepatchResponse ();
        }

        return true;
      }

      if (n == "filecontentRequest" && ns == "http://www.honeybadger.com")
      {
        if (this->filecontentRequest_parser_)
        {
          this->filecontentRequest_parser_->post_filecontentRequestMessageType ();
          this->filecontentRequest ();
        }

        return true;
      }

      if (n == "filecontentResponse" && ns == "http://www.honeybadger.com")
      {
        if (this->filecontentResponse_parser_)
        {
          this->filecontentResponse_parser_->post_filecontentResponseMessageType ();
          this->filecontentResponse ();
        }

        return true;
      }

      return false;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

