// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "honeybadger.hxx"

namespace honeybadger
{
  namespace message
  {
    // useridType
    // 


    // hostidType
    // 


    // passwordType
    // 


    // fileidType
    // 


    // filepathType
    // 


    // emailType
    // 


    // filecontentType
    // 


    // actionType
    // 

    actionType::
    actionType (value v)
    : ::xml_schema::string (_xsd_actionType_literals_[v])
    {
    }

    actionType::
    actionType (const char* v)
    : ::xml_schema::string (v)
    {
    }

    actionType::
    actionType (const ::std::string& v)
    : ::xml_schema::string (v)
    {
    }

    actionType::
    actionType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    actionType::
    actionType (const actionType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    actionType& actionType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_actionType_literals_[v]);

      return *this;
    }


    // filelengthType
    // 


    // registerRequestMessageType
    // 

    const registerRequestMessageType::userid_type& registerRequestMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    registerRequestMessageType::userid_type& registerRequestMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void registerRequestMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void registerRequestMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const registerRequestMessageType::password_type& registerRequestMessageType::
    password () const
    {
      return this->password_.get ();
    }

    registerRequestMessageType::password_type& registerRequestMessageType::
    password ()
    {
      return this->password_.get ();
    }

    void registerRequestMessageType::
    password (const password_type& x)
    {
      this->password_.set (x);
    }

    void registerRequestMessageType::
    password (::std::auto_ptr< password_type > x)
    {
      this->password_.set (x);
    }

    const registerRequestMessageType::email_type& registerRequestMessageType::
    email () const
    {
      return this->email_.get ();
    }

    registerRequestMessageType::email_type& registerRequestMessageType::
    email ()
    {
      return this->email_.get ();
    }

    void registerRequestMessageType::
    email (const email_type& x)
    {
      this->email_.set (x);
    }

    void registerRequestMessageType::
    email (::std::auto_ptr< email_type > x)
    {
      this->email_.set (x);
    }


    // registerResponseMessageType
    // 

    const registerResponseMessageType::userid_type& registerResponseMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    registerResponseMessageType::userid_type& registerResponseMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void registerResponseMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void registerResponseMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const registerResponseMessageType::result_type& registerResponseMessageType::
    result () const
    {
      return this->result_.get ();
    }

    registerResponseMessageType::result_type& registerResponseMessageType::
    result ()
    {
      return this->result_.get ();
    }

    void registerResponseMessageType::
    result (const result_type& x)
    {
      this->result_.set (x);
    }

    const registerResponseMessageType::details_optional& registerResponseMessageType::
    details () const
    {
      return this->details_;
    }

    registerResponseMessageType::details_optional& registerResponseMessageType::
    details ()
    {
      return this->details_;
    }

    void registerResponseMessageType::
    details (const details_type& x)
    {
      this->details_.set (x);
    }

    void registerResponseMessageType::
    details (const details_optional& x)
    {
      this->details_ = x;
    }

    void registerResponseMessageType::
    details (::std::auto_ptr< details_type > x)
    {
      this->details_.set (x);
    }


    // loginRequestMessageType
    // 

    const loginRequestMessageType::userid_type& loginRequestMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    loginRequestMessageType::userid_type& loginRequestMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void loginRequestMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void loginRequestMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const loginRequestMessageType::password_type& loginRequestMessageType::
    password () const
    {
      return this->password_.get ();
    }

    loginRequestMessageType::password_type& loginRequestMessageType::
    password ()
    {
      return this->password_.get ();
    }

    void loginRequestMessageType::
    password (const password_type& x)
    {
      this->password_.set (x);
    }

    void loginRequestMessageType::
    password (::std::auto_ptr< password_type > x)
    {
      this->password_.set (x);
    }


    // loginResponseMessageType
    // 

    const loginResponseMessageType::userid_type& loginResponseMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    loginResponseMessageType::userid_type& loginResponseMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void loginResponseMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void loginResponseMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const loginResponseMessageType::result_type& loginResponseMessageType::
    result () const
    {
      return this->result_.get ();
    }

    loginResponseMessageType::result_type& loginResponseMessageType::
    result ()
    {
      return this->result_.get ();
    }

    void loginResponseMessageType::
    result (const result_type& x)
    {
      this->result_.set (x);
    }

    const loginResponseMessageType::details_optional& loginResponseMessageType::
    details () const
    {
      return this->details_;
    }

    loginResponseMessageType::details_optional& loginResponseMessageType::
    details ()
    {
      return this->details_;
    }

    void loginResponseMessageType::
    details (const details_type& x)
    {
      this->details_.set (x);
    }

    void loginResponseMessageType::
    details (const details_optional& x)
    {
      this->details_ = x;
    }

    void loginResponseMessageType::
    details (::std::auto_ptr< details_type > x)
    {
      this->details_.set (x);
    }


    // newfileRequestMessageType
    // 

    const newfileRequestMessageType::userid_type& newfileRequestMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    newfileRequestMessageType::userid_type& newfileRequestMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void newfileRequestMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void newfileRequestMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const newfileRequestMessageType::fileid_type& newfileRequestMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    newfileRequestMessageType::fileid_type& newfileRequestMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void newfileRequestMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void newfileRequestMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const newfileRequestMessageType::filepath_type& newfileRequestMessageType::
    filepath () const
    {
      return this->filepath_.get ();
    }

    newfileRequestMessageType::filepath_type& newfileRequestMessageType::
    filepath ()
    {
      return this->filepath_.get ();
    }

    void newfileRequestMessageType::
    filepath (const filepath_type& x)
    {
      this->filepath_.set (x);
    }

    void newfileRequestMessageType::
    filepath (::std::auto_ptr< filepath_type > x)
    {
      this->filepath_.set (x);
    }

    const newfileRequestMessageType::length_type& newfileRequestMessageType::
    length () const
    {
      return this->length_.get ();
    }

    newfileRequestMessageType::length_type& newfileRequestMessageType::
    length ()
    {
      return this->length_.get ();
    }

    void newfileRequestMessageType::
    length (const length_type& x)
    {
      this->length_.set (x);
    }

    void newfileRequestMessageType::
    length (::std::auto_ptr< length_type > x)
    {
      this->length_.set (x);
    }


    // newfileResponseMessageType
    // 

    const newfileResponseMessageType::userid_type& newfileResponseMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    newfileResponseMessageType::userid_type& newfileResponseMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void newfileResponseMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void newfileResponseMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const newfileResponseMessageType::fileid_type& newfileResponseMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    newfileResponseMessageType::fileid_type& newfileResponseMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void newfileResponseMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void newfileResponseMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const newfileResponseMessageType::result_type& newfileResponseMessageType::
    result () const
    {
      return this->result_.get ();
    }

    newfileResponseMessageType::result_type& newfileResponseMessageType::
    result ()
    {
      return this->result_.get ();
    }

    void newfileResponseMessageType::
    result (const result_type& x)
    {
      this->result_.set (x);
    }

    const newfileResponseMessageType::details_optional& newfileResponseMessageType::
    details () const
    {
      return this->details_;
    }

    newfileResponseMessageType::details_optional& newfileResponseMessageType::
    details ()
    {
      return this->details_;
    }

    void newfileResponseMessageType::
    details (const details_type& x)
    {
      this->details_.set (x);
    }

    void newfileResponseMessageType::
    details (const details_optional& x)
    {
      this->details_ = x;
    }

    void newfileResponseMessageType::
    details (::std::auto_ptr< details_type > x)
    {
      this->details_.set (x);
    }


    // filepatchRequestMessageType
    // 

    const filepatchRequestMessageType::userid_type& filepatchRequestMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    filepatchRequestMessageType::userid_type& filepatchRequestMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void filepatchRequestMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void filepatchRequestMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const filepatchRequestMessageType::fileid_type& filepatchRequestMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    filepatchRequestMessageType::fileid_type& filepatchRequestMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void filepatchRequestMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void filepatchRequestMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const filepatchRequestMessageType::path_type& filepatchRequestMessageType::
    path () const
    {
      return this->path_.get ();
    }

    filepatchRequestMessageType::path_type& filepatchRequestMessageType::
    path ()
    {
      return this->path_.get ();
    }

    void filepatchRequestMessageType::
    path (const path_type& x)
    {
      this->path_.set (x);
    }

    void filepatchRequestMessageType::
    path (::std::auto_ptr< path_type > x)
    {
      this->path_.set (x);
    }


    // filepatchResponseMessageType
    // 

    const filepatchResponseMessageType::userid_type& filepatchResponseMessageType::
    userid () const
    {
      return this->userid_.get ();
    }

    filepatchResponseMessageType::userid_type& filepatchResponseMessageType::
    userid ()
    {
      return this->userid_.get ();
    }

    void filepatchResponseMessageType::
    userid (const userid_type& x)
    {
      this->userid_.set (x);
    }

    void filepatchResponseMessageType::
    userid (::std::auto_ptr< userid_type > x)
    {
      this->userid_.set (x);
    }

    const filepatchResponseMessageType::fileid_type& filepatchResponseMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    filepatchResponseMessageType::fileid_type& filepatchResponseMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void filepatchResponseMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void filepatchResponseMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const filepatchResponseMessageType::result_type& filepatchResponseMessageType::
    result () const
    {
      return this->result_.get ();
    }

    filepatchResponseMessageType::result_type& filepatchResponseMessageType::
    result ()
    {
      return this->result_.get ();
    }

    void filepatchResponseMessageType::
    result (const result_type& x)
    {
      this->result_.set (x);
    }

    const filepatchResponseMessageType::details_optional& filepatchResponseMessageType::
    details () const
    {
      return this->details_;
    }

    filepatchResponseMessageType::details_optional& filepatchResponseMessageType::
    details ()
    {
      return this->details_;
    }

    void filepatchResponseMessageType::
    details (const details_type& x)
    {
      this->details_.set (x);
    }

    void filepatchResponseMessageType::
    details (const details_optional& x)
    {
      this->details_ = x;
    }

    void filepatchResponseMessageType::
    details (::std::auto_ptr< details_type > x)
    {
      this->details_.set (x);
    }


    // filecontentRequestMessageType
    // 

    const filecontentRequestMessageType::fileid_type& filecontentRequestMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    filecontentRequestMessageType::fileid_type& filecontentRequestMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void filecontentRequestMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void filecontentRequestMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const filecontentRequestMessageType::content_type& filecontentRequestMessageType::
    content () const
    {
      return this->content_.get ();
    }

    filecontentRequestMessageType::content_type& filecontentRequestMessageType::
    content ()
    {
      return this->content_.get ();
    }

    void filecontentRequestMessageType::
    content (const content_type& x)
    {
      this->content_.set (x);
    }

    void filecontentRequestMessageType::
    content (::std::auto_ptr< content_type > x)
    {
      this->content_.set (x);
    }


    // filecontentResponseMessageType
    // 

    const filecontentResponseMessageType::fileid_type& filecontentResponseMessageType::
    fileid () const
    {
      return this->fileid_.get ();
    }

    filecontentResponseMessageType::fileid_type& filecontentResponseMessageType::
    fileid ()
    {
      return this->fileid_.get ();
    }

    void filecontentResponseMessageType::
    fileid (const fileid_type& x)
    {
      this->fileid_.set (x);
    }

    void filecontentResponseMessageType::
    fileid (::std::auto_ptr< fileid_type > x)
    {
      this->fileid_.set (x);
    }

    const filecontentResponseMessageType::result_type& filecontentResponseMessageType::
    result () const
    {
      return this->result_.get ();
    }

    filecontentResponseMessageType::result_type& filecontentResponseMessageType::
    result ()
    {
      return this->result_.get ();
    }

    void filecontentResponseMessageType::
    result (const result_type& x)
    {
      this->result_.set (x);
    }

    const filecontentResponseMessageType::details_optional& filecontentResponseMessageType::
    details () const
    {
      return this->details_;
    }

    filecontentResponseMessageType::details_optional& filecontentResponseMessageType::
    details ()
    {
      return this->details_;
    }

    void filecontentResponseMessageType::
    details (const details_type& x)
    {
      this->details_.set (x);
    }

    void filecontentResponseMessageType::
    details (const details_optional& x)
    {
      this->details_ = x;
    }

    void filecontentResponseMessageType::
    details (::std::auto_ptr< details_type > x)
    {
      this->details_.set (x);
    }


    // HBMessages
    // 

    const HBMessages::registerRequest_sequence& HBMessages::
    registerRequest () const
    {
      return this->registerRequest_;
    }

    HBMessages::registerRequest_sequence& HBMessages::
    registerRequest ()
    {
      return this->registerRequest_;
    }

    void HBMessages::
    registerRequest (const registerRequest_sequence& s)
    {
      this->registerRequest_ = s;
    }

    const HBMessages::registerResponse_sequence& HBMessages::
    registerResponse () const
    {
      return this->registerResponse_;
    }

    HBMessages::registerResponse_sequence& HBMessages::
    registerResponse ()
    {
      return this->registerResponse_;
    }

    void HBMessages::
    registerResponse (const registerResponse_sequence& s)
    {
      this->registerResponse_ = s;
    }

    const HBMessages::loginRequest_sequence& HBMessages::
    loginRequest () const
    {
      return this->loginRequest_;
    }

    HBMessages::loginRequest_sequence& HBMessages::
    loginRequest ()
    {
      return this->loginRequest_;
    }

    void HBMessages::
    loginRequest (const loginRequest_sequence& s)
    {
      this->loginRequest_ = s;
    }

    const HBMessages::loginResponse_sequence& HBMessages::
    loginResponse () const
    {
      return this->loginResponse_;
    }

    HBMessages::loginResponse_sequence& HBMessages::
    loginResponse ()
    {
      return this->loginResponse_;
    }

    void HBMessages::
    loginResponse (const loginResponse_sequence& s)
    {
      this->loginResponse_ = s;
    }

    const HBMessages::newfileRequest_sequence& HBMessages::
    newfileRequest () const
    {
      return this->newfileRequest_;
    }

    HBMessages::newfileRequest_sequence& HBMessages::
    newfileRequest ()
    {
      return this->newfileRequest_;
    }

    void HBMessages::
    newfileRequest (const newfileRequest_sequence& s)
    {
      this->newfileRequest_ = s;
    }

    const HBMessages::newfileResponse_sequence& HBMessages::
    newfileResponse () const
    {
      return this->newfileResponse_;
    }

    HBMessages::newfileResponse_sequence& HBMessages::
    newfileResponse ()
    {
      return this->newfileResponse_;
    }

    void HBMessages::
    newfileResponse (const newfileResponse_sequence& s)
    {
      this->newfileResponse_ = s;
    }

    const HBMessages::filepatchRequest_sequence& HBMessages::
    filepatchRequest () const
    {
      return this->filepatchRequest_;
    }

    HBMessages::filepatchRequest_sequence& HBMessages::
    filepatchRequest ()
    {
      return this->filepatchRequest_;
    }

    void HBMessages::
    filepatchRequest (const filepatchRequest_sequence& s)
    {
      this->filepatchRequest_ = s;
    }

    const HBMessages::filepatchResponse_sequence& HBMessages::
    filepatchResponse () const
    {
      return this->filepatchResponse_;
    }

    HBMessages::filepatchResponse_sequence& HBMessages::
    filepatchResponse ()
    {
      return this->filepatchResponse_;
    }

    void HBMessages::
    filepatchResponse (const filepatchResponse_sequence& s)
    {
      this->filepatchResponse_ = s;
    }

    const HBMessages::filecontentRequest_sequence& HBMessages::
    filecontentRequest () const
    {
      return this->filecontentRequest_;
    }

    HBMessages::filecontentRequest_sequence& HBMessages::
    filecontentRequest ()
    {
      return this->filecontentRequest_;
    }

    void HBMessages::
    filecontentRequest (const filecontentRequest_sequence& s)
    {
      this->filecontentRequest_ = s;
    }

    const HBMessages::filecontentResponse_sequence& HBMessages::
    filecontentResponse () const
    {
      return this->filecontentResponse_;
    }

    HBMessages::filecontentResponse_sequence& HBMessages::
    filecontentResponse ()
    {
      return this->filecontentResponse_;
    }

    void HBMessages::
    filecontentResponse (const filecontentResponse_sequence& s)
    {
      this->filecontentResponse_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace honeybadger
{
  namespace message
  {
    // useridType
    //

    useridType::
    useridType ()
    : ::xml_schema::string ()
    {
    }

    useridType::
    useridType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    useridType::
    useridType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    useridType::
    useridType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    useridType::
    useridType (const useridType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    useridType::
    useridType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    useridType::
    useridType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    useridType::
    useridType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    useridType* useridType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class useridType (*this, f, c);
    }

    useridType::
    ~useridType ()
    {
    }

    // hostidType
    //

    hostidType::
    hostidType ()
    : ::xml_schema::string ()
    {
    }

    hostidType::
    hostidType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    hostidType::
    hostidType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    hostidType::
    hostidType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    hostidType::
    hostidType (const hostidType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    hostidType::
    hostidType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    hostidType::
    hostidType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    hostidType::
    hostidType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    hostidType* hostidType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class hostidType (*this, f, c);
    }

    hostidType::
    ~hostidType ()
    {
    }

    // passwordType
    //

    passwordType::
    passwordType ()
    : ::xml_schema::string ()
    {
    }

    passwordType::
    passwordType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    passwordType::
    passwordType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    passwordType::
    passwordType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    passwordType::
    passwordType (const passwordType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    passwordType::
    passwordType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    passwordType::
    passwordType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    passwordType::
    passwordType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    passwordType* passwordType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class passwordType (*this, f, c);
    }

    passwordType::
    ~passwordType ()
    {
    }

    // fileidType
    //

    fileidType::
    fileidType ()
    : ::xml_schema::string ()
    {
    }

    fileidType::
    fileidType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    fileidType::
    fileidType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    fileidType::
    fileidType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    fileidType::
    fileidType (const fileidType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    fileidType::
    fileidType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    fileidType::
    fileidType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    fileidType::
    fileidType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    fileidType* fileidType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class fileidType (*this, f, c);
    }

    fileidType::
    ~fileidType ()
    {
    }

    // filepathType
    //

    filepathType::
    filepathType ()
    : ::xml_schema::string ()
    {
    }

    filepathType::
    filepathType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filepathType::
    filepathType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filepathType::
    filepathType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filepathType::
    filepathType (const filepathType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    filepathType::
    filepathType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    filepathType::
    filepathType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    filepathType::
    filepathType (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    filepathType* filepathType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filepathType (*this, f, c);
    }

    filepathType::
    ~filepathType ()
    {
    }

    // emailType
    //

    emailType::
    emailType ()
    : ::xml_schema::string ()
    {
    }

    emailType::
    emailType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    emailType::
    emailType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    emailType::
    emailType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    emailType::
    emailType (const emailType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    emailType::
    emailType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    emailType::
    emailType (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    emailType::
    emailType (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    emailType* emailType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class emailType (*this, f, c);
    }

    emailType::
    ~emailType ()
    {
    }

    // filecontentType
    //

    filecontentType::
    filecontentType ()
    : ::xml_schema::string ()
    {
    }

    filecontentType::
    filecontentType (const char* _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filecontentType::
    filecontentType (const ::std::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filecontentType::
    filecontentType (const ::xml_schema::string& _xsd_string_base)
    : ::xml_schema::string (_xsd_string_base)
    {
    }

    filecontentType::
    filecontentType (const filecontentType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (x, f, c)
    {
    }

    filecontentType::
    filecontentType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
    }

    filecontentType::
    filecontentType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
    }

    filecontentType::
    filecontentType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
    }

    filecontentType* filecontentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filecontentType (*this, f, c);
    }

    filecontentType::
    ~filecontentType ()
    {
    }

    // actionType
    //

    actionType::
    actionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_actionType_convert ();
    }

    actionType::
    actionType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_actionType_convert ();
    }

    actionType::
    actionType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_actionType_convert ();
    }

    actionType* actionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class actionType (*this, f, c);
    }

    actionType::value actionType::
    _xsd_actionType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_actionType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_actionType_indexes_,
                        _xsd_actionType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_actionType_indexes_ + 2 || _xsd_actionType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const actionType::
    _xsd_actionType_literals_[2] =
    {
      "request",
      "response"
    };

    const actionType::value actionType::
    _xsd_actionType_indexes_[2] =
    {
      ::honeybadger::message::actionType::request,
      ::honeybadger::message::actionType::response
    };

    // filelengthType
    //

    filelengthType::
    filelengthType (const ::xml_schema::integer& _xsd_integer_base)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
    {
    }

    filelengthType::
    filelengthType (const filelengthType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
    {
    }

    filelengthType::
    filelengthType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
    {
    }

    filelengthType::
    filelengthType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
    {
    }

    filelengthType::
    filelengthType (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
    {
    }

    filelengthType* filelengthType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filelengthType (*this, f, c);
    }

    filelengthType::
    ~filelengthType ()
    {
    }

    // registerRequestMessageType
    //

    registerRequestMessageType::
    registerRequestMessageType (const userid_type& userid,
                                const password_type& password,
                                const email_type& email)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      password_ (password, ::xml_schema::flags (), this),
      email_ (email, ::xml_schema::flags (), this)
    {
    }

    registerRequestMessageType::
    registerRequestMessageType (const registerRequestMessageType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      password_ (x.password_, f, this),
      email_ (x.email_, f, this)
    {
    }

    registerRequestMessageType::
    registerRequestMessageType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      password_ (f, this),
      email_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void registerRequestMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // password
        //
        if (n.name () == "password" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< password_type > r (
            password_traits::create (i, f, this));

          if (!password_.present ())
          {
            this->password_.set (r);
            continue;
          }
        }

        // email
        //
        if (n.name () == "email" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< email_type > r (
            email_traits::create (i, f, this));

          if (!email_.present ())
          {
            this->email_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!password_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "password",
          "http://www.honeybadger.com");
      }

      if (!email_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "email",
          "http://www.honeybadger.com");
      }
    }

    registerRequestMessageType* registerRequestMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class registerRequestMessageType (*this, f, c);
    }

    registerRequestMessageType::
    ~registerRequestMessageType ()
    {
    }

    // registerResponseMessageType
    //

    registerResponseMessageType::
    registerResponseMessageType (const userid_type& userid,
                                 const result_type& result)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      result_ (result, ::xml_schema::flags (), this),
      details_ (::xml_schema::flags (), this)
    {
    }

    registerResponseMessageType::
    registerResponseMessageType (const registerResponseMessageType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      result_ (x.result_, f, this),
      details_ (x.details_, f, this)
    {
    }

    registerResponseMessageType::
    registerResponseMessageType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      result_ (f, this),
      details_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void registerResponseMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // result
        //
        if (n.name () == "result" && n.namespace_ () == "http://www.honeybadger.com")
        {
          if (!result_.present ())
          {
            this->result_.set (result_traits::create (i, f, this));
            continue;
          }
        }

        // details
        //
        if (n.name () == "details" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< details_type > r (
            details_traits::create (i, f, this));

          if (!this->details_)
          {
            this->details_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "result",
          "http://www.honeybadger.com");
      }
    }

    registerResponseMessageType* registerResponseMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class registerResponseMessageType (*this, f, c);
    }

    registerResponseMessageType::
    ~registerResponseMessageType ()
    {
    }

    // loginRequestMessageType
    //

    loginRequestMessageType::
    loginRequestMessageType (const userid_type& userid,
                             const password_type& password)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      password_ (password, ::xml_schema::flags (), this)
    {
    }

    loginRequestMessageType::
    loginRequestMessageType (const loginRequestMessageType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      password_ (x.password_, f, this)
    {
    }

    loginRequestMessageType::
    loginRequestMessageType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      password_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void loginRequestMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // password
        //
        if (n.name () == "password" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< password_type > r (
            password_traits::create (i, f, this));

          if (!password_.present ())
          {
            this->password_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!password_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "password",
          "http://www.honeybadger.com");
      }
    }

    loginRequestMessageType* loginRequestMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class loginRequestMessageType (*this, f, c);
    }

    loginRequestMessageType::
    ~loginRequestMessageType ()
    {
    }

    // loginResponseMessageType
    //

    loginResponseMessageType::
    loginResponseMessageType (const userid_type& userid,
                              const result_type& result)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      result_ (result, ::xml_schema::flags (), this),
      details_ (::xml_schema::flags (), this)
    {
    }

    loginResponseMessageType::
    loginResponseMessageType (const loginResponseMessageType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      result_ (x.result_, f, this),
      details_ (x.details_, f, this)
    {
    }

    loginResponseMessageType::
    loginResponseMessageType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      result_ (f, this),
      details_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void loginResponseMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // result
        //
        if (n.name () == "result" && n.namespace_ () == "http://www.honeybadger.com")
        {
          if (!result_.present ())
          {
            this->result_.set (result_traits::create (i, f, this));
            continue;
          }
        }

        // details
        //
        if (n.name () == "details" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< details_type > r (
            details_traits::create (i, f, this));

          if (!this->details_)
          {
            this->details_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "result",
          "http://www.honeybadger.com");
      }
    }

    loginResponseMessageType* loginResponseMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class loginResponseMessageType (*this, f, c);
    }

    loginResponseMessageType::
    ~loginResponseMessageType ()
    {
    }

    // newfileRequestMessageType
    //

    newfileRequestMessageType::
    newfileRequestMessageType (const userid_type& userid,
                               const fileid_type& fileid,
                               const filepath_type& filepath,
                               const length_type& length)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      fileid_ (fileid, ::xml_schema::flags (), this),
      filepath_ (filepath, ::xml_schema::flags (), this),
      length_ (length, ::xml_schema::flags (), this)
    {
    }

    newfileRequestMessageType::
    newfileRequestMessageType (const newfileRequestMessageType& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      fileid_ (x.fileid_, f, this),
      filepath_ (x.filepath_, f, this),
      length_ (x.length_, f, this)
    {
    }

    newfileRequestMessageType::
    newfileRequestMessageType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      fileid_ (f, this),
      filepath_ (f, this),
      length_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void newfileRequestMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // filepath
        //
        if (n.name () == "filepath" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< filepath_type > r (
            filepath_traits::create (i, f, this));

          if (!filepath_.present ())
          {
            this->filepath_.set (r);
            continue;
          }
        }

        // length
        //
        if (n.name () == "length" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< length_type > r (
            length_traits::create (i, f, this));

          if (!length_.present ())
          {
            this->length_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!filepath_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "filepath",
          "http://www.honeybadger.com");
      }

      if (!length_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "length",
          "http://www.honeybadger.com");
      }
    }

    newfileRequestMessageType* newfileRequestMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class newfileRequestMessageType (*this, f, c);
    }

    newfileRequestMessageType::
    ~newfileRequestMessageType ()
    {
    }

    // newfileResponseMessageType
    //

    newfileResponseMessageType::
    newfileResponseMessageType (const userid_type& userid,
                                const fileid_type& fileid,
                                const result_type& result)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      fileid_ (fileid, ::xml_schema::flags (), this),
      result_ (result, ::xml_schema::flags (), this),
      details_ (::xml_schema::flags (), this)
    {
    }

    newfileResponseMessageType::
    newfileResponseMessageType (const newfileResponseMessageType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      fileid_ (x.fileid_, f, this),
      result_ (x.result_, f, this),
      details_ (x.details_, f, this)
    {
    }

    newfileResponseMessageType::
    newfileResponseMessageType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      fileid_ (f, this),
      result_ (f, this),
      details_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void newfileResponseMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // result
        //
        if (n.name () == "result" && n.namespace_ () == "http://www.honeybadger.com")
        {
          if (!result_.present ())
          {
            this->result_.set (result_traits::create (i, f, this));
            continue;
          }
        }

        // details
        //
        if (n.name () == "details" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< details_type > r (
            details_traits::create (i, f, this));

          if (!this->details_)
          {
            this->details_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "result",
          "http://www.honeybadger.com");
      }
    }

    newfileResponseMessageType* newfileResponseMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class newfileResponseMessageType (*this, f, c);
    }

    newfileResponseMessageType::
    ~newfileResponseMessageType ()
    {
    }

    // filepatchRequestMessageType
    //

    filepatchRequestMessageType::
    filepatchRequestMessageType (const userid_type& userid,
                                 const fileid_type& fileid,
                                 const path_type& path)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      fileid_ (fileid, ::xml_schema::flags (), this),
      path_ (path, ::xml_schema::flags (), this)
    {
    }

    filepatchRequestMessageType::
    filepatchRequestMessageType (const filepatchRequestMessageType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      fileid_ (x.fileid_, f, this),
      path_ (x.path_, f, this)
    {
    }

    filepatchRequestMessageType::
    filepatchRequestMessageType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      fileid_ (f, this),
      path_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void filepatchRequestMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // path
        //
        if (n.name () == "path" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< path_type > r (
            path_traits::create (i, f, this));

          if (!path_.present ())
          {
            this->path_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!path_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "path",
          "http://www.honeybadger.com");
      }
    }

    filepatchRequestMessageType* filepatchRequestMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filepatchRequestMessageType (*this, f, c);
    }

    filepatchRequestMessageType::
    ~filepatchRequestMessageType ()
    {
    }

    // filepatchResponseMessageType
    //

    filepatchResponseMessageType::
    filepatchResponseMessageType (const userid_type& userid,
                                  const fileid_type& fileid,
                                  const result_type& result)
    : ::xml_schema::type (),
      userid_ (userid, ::xml_schema::flags (), this),
      fileid_ (fileid, ::xml_schema::flags (), this),
      result_ (result, ::xml_schema::flags (), this),
      details_ (::xml_schema::flags (), this)
    {
    }

    filepatchResponseMessageType::
    filepatchResponseMessageType (const filepatchResponseMessageType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      userid_ (x.userid_, f, this),
      fileid_ (x.fileid_, f, this),
      result_ (x.result_, f, this),
      details_ (x.details_, f, this)
    {
    }

    filepatchResponseMessageType::
    filepatchResponseMessageType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      userid_ (f, this),
      fileid_ (f, this),
      result_ (f, this),
      details_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void filepatchResponseMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // userid
        //
        if (n.name () == "userid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< userid_type > r (
            userid_traits::create (i, f, this));

          if (!userid_.present ())
          {
            this->userid_.set (r);
            continue;
          }
        }

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // result
        //
        if (n.name () == "result" && n.namespace_ () == "http://www.honeybadger.com")
        {
          if (!result_.present ())
          {
            this->result_.set (result_traits::create (i, f, this));
            continue;
          }
        }

        // details
        //
        if (n.name () == "details" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< details_type > r (
            details_traits::create (i, f, this));

          if (!this->details_)
          {
            this->details_.set (r);
            continue;
          }
        }

        break;
      }

      if (!userid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "userid",
          "http://www.honeybadger.com");
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "result",
          "http://www.honeybadger.com");
      }
    }

    filepatchResponseMessageType* filepatchResponseMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filepatchResponseMessageType (*this, f, c);
    }

    filepatchResponseMessageType::
    ~filepatchResponseMessageType ()
    {
    }

    // filecontentRequestMessageType
    //

    filecontentRequestMessageType::
    filecontentRequestMessageType (const fileid_type& fileid,
                                   const content_type& content)
    : ::xml_schema::type (),
      fileid_ (fileid, ::xml_schema::flags (), this),
      content_ (content, ::xml_schema::flags (), this)
    {
    }

    filecontentRequestMessageType::
    filecontentRequestMessageType (const filecontentRequestMessageType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      fileid_ (x.fileid_, f, this),
      content_ (x.content_, f, this)
    {
    }

    filecontentRequestMessageType::
    filecontentRequestMessageType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      fileid_ (f, this),
      content_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void filecontentRequestMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // content
        //
        if (n.name () == "content" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< content_type > r (
            content_traits::create (i, f, this));

          if (!content_.present ())
          {
            this->content_.set (r);
            continue;
          }
        }

        break;
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!content_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "content",
          "http://www.honeybadger.com");
      }
    }

    filecontentRequestMessageType* filecontentRequestMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filecontentRequestMessageType (*this, f, c);
    }

    filecontentRequestMessageType::
    ~filecontentRequestMessageType ()
    {
    }

    // filecontentResponseMessageType
    //

    filecontentResponseMessageType::
    filecontentResponseMessageType (const fileid_type& fileid,
                                    const result_type& result)
    : ::xml_schema::type (),
      fileid_ (fileid, ::xml_schema::flags (), this),
      result_ (result, ::xml_schema::flags (), this),
      details_ (::xml_schema::flags (), this)
    {
    }

    filecontentResponseMessageType::
    filecontentResponseMessageType (const filecontentResponseMessageType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      fileid_ (x.fileid_, f, this),
      result_ (x.result_, f, this),
      details_ (x.details_, f, this)
    {
    }

    filecontentResponseMessageType::
    filecontentResponseMessageType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      fileid_ (f, this),
      result_ (f, this),
      details_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void filecontentResponseMessageType::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // fileid
        //
        if (n.name () == "fileid" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< fileid_type > r (
            fileid_traits::create (i, f, this));

          if (!fileid_.present ())
          {
            this->fileid_.set (r);
            continue;
          }
        }

        // result
        //
        if (n.name () == "result" && n.namespace_ () == "http://www.honeybadger.com")
        {
          if (!result_.present ())
          {
            this->result_.set (result_traits::create (i, f, this));
            continue;
          }
        }

        // details
        //
        if (n.name () == "details" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< details_type > r (
            details_traits::create (i, f, this));

          if (!this->details_)
          {
            this->details_.set (r);
            continue;
          }
        }

        break;
      }

      if (!fileid_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileid",
          "http://www.honeybadger.com");
      }

      if (!result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "result",
          "http://www.honeybadger.com");
      }
    }

    filecontentResponseMessageType* filecontentResponseMessageType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class filecontentResponseMessageType (*this, f, c);
    }

    filecontentResponseMessageType::
    ~filecontentResponseMessageType ()
    {
    }

    // HBMessages
    //

    HBMessages::
    HBMessages ()
    : ::xml_schema::type (),
      registerRequest_ (::xml_schema::flags (), this),
      registerResponse_ (::xml_schema::flags (), this),
      loginRequest_ (::xml_schema::flags (), this),
      loginResponse_ (::xml_schema::flags (), this),
      newfileRequest_ (::xml_schema::flags (), this),
      newfileResponse_ (::xml_schema::flags (), this),
      filepatchRequest_ (::xml_schema::flags (), this),
      filepatchResponse_ (::xml_schema::flags (), this),
      filecontentRequest_ (::xml_schema::flags (), this),
      filecontentResponse_ (::xml_schema::flags (), this)
    {
    }

    HBMessages::
    HBMessages (const HBMessages& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      registerRequest_ (x.registerRequest_, f, this),
      registerResponse_ (x.registerResponse_, f, this),
      loginRequest_ (x.loginRequest_, f, this),
      loginResponse_ (x.loginResponse_, f, this),
      newfileRequest_ (x.newfileRequest_, f, this),
      newfileResponse_ (x.newfileResponse_, f, this),
      filepatchRequest_ (x.filepatchRequest_, f, this),
      filepatchResponse_ (x.filepatchResponse_, f, this),
      filecontentRequest_ (x.filecontentRequest_, f, this),
      filecontentResponse_ (x.filecontentResponse_, f, this)
    {
    }

    HBMessages::
    HBMessages (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      registerRequest_ (f, this),
      registerResponse_ (f, this),
      loginRequest_ (f, this),
      loginResponse_ (f, this),
      newfileRequest_ (f, this),
      newfileResponse_ (f, this),
      filepatchRequest_ (f, this),
      filepatchResponse_ (f, this),
      filecontentRequest_ (f, this),
      filecontentResponse_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void HBMessages::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // registerRequest
        //
        if (n.name () == "registerRequest" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< registerRequest_type > r (
            registerRequest_traits::create (i, f, this));

          this->registerRequest_.push_back (r);
          continue;
        }

        // registerResponse
        //
        if (n.name () == "registerResponse" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< registerResponse_type > r (
            registerResponse_traits::create (i, f, this));

          this->registerResponse_.push_back (r);
          continue;
        }

        // loginRequest
        //
        if (n.name () == "loginRequest" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< loginRequest_type > r (
            loginRequest_traits::create (i, f, this));

          this->loginRequest_.push_back (r);
          continue;
        }

        // loginResponse
        //
        if (n.name () == "loginResponse" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< loginResponse_type > r (
            loginResponse_traits::create (i, f, this));

          this->loginResponse_.push_back (r);
          continue;
        }

        // newfileRequest
        //
        if (n.name () == "newfileRequest" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< newfileRequest_type > r (
            newfileRequest_traits::create (i, f, this));

          this->newfileRequest_.push_back (r);
          continue;
        }

        // newfileResponse
        //
        if (n.name () == "newfileResponse" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< newfileResponse_type > r (
            newfileResponse_traits::create (i, f, this));

          this->newfileResponse_.push_back (r);
          continue;
        }

        // filepatchRequest
        //
        if (n.name () == "filepatchRequest" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< filepatchRequest_type > r (
            filepatchRequest_traits::create (i, f, this));

          this->filepatchRequest_.push_back (r);
          continue;
        }

        // filepatchResponse
        //
        if (n.name () == "filepatchResponse" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< filepatchResponse_type > r (
            filepatchResponse_traits::create (i, f, this));

          this->filepatchResponse_.push_back (r);
          continue;
        }

        // filecontentRequest
        //
        if (n.name () == "filecontentRequest" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< filecontentRequest_type > r (
            filecontentRequest_traits::create (i, f, this));

          this->filecontentRequest_.push_back (r);
          continue;
        }

        // filecontentResponse
        //
        if (n.name () == "filecontentResponse" && n.namespace_ () == "http://www.honeybadger.com")
        {
          ::std::auto_ptr< filecontentResponse_type > r (
            filecontentResponse_traits::create (i, f, this));

          this->filecontentResponse_.push_back (r);
          continue;
        }

        break;
      }
    }

    HBMessages* HBMessages::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HBMessages (*this, f, c);
    }

    HBMessages::
    ~HBMessages ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace honeybadger
{
  namespace message
  {
    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::honeybadger::message::HBMessages_ (isrc, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::honeybadger::message::HBMessages_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::honeybadger::message::HBMessages_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::honeybadger::message::HBMessages_ (isrc, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::honeybadger::message::HBMessages_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::honeybadger::message::HBMessages_ (isrc, h, f, p);
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
        ::honeybadger::message::HBMessages_ (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
          ::honeybadger::message::HBMessages_ (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "HBMessages" &&
          n.namespace_ () == "http://www.honeybadger.com")
      {
        ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
          ::xsd::cxx::tree::traits< ::honeybadger::message::HBMessages, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HBMessages",
        "http://www.honeybadger.com");
    }

    ::std::auto_ptr< ::honeybadger::message::HBMessages >
    HBMessages_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "HBMessages" &&
          n.namespace_ () == "http://www.honeybadger.com")
      {
        ::std::auto_ptr< ::honeybadger::message::HBMessages > r (
          ::xsd::cxx::tree::traits< ::honeybadger::message::HBMessages, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HBMessages",
        "http://www.honeybadger.com");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

